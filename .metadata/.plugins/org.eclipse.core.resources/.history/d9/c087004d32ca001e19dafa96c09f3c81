package roundrobin;

import java.util.*;

class Process {
    String name;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int turnaroundTime;
    int waitingTime;

    public Process(String name, int arrivalTime, int burstTime) {
        this.name = name;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime;
        this.completionTime = 0;
        this.turnaroundTime = 0;
        this.waitingTime = 0;
    }
}

public class RoundRobin {
    public static void main(String[] args) {
        List<Process> processes = new ArrayList<>();
        processes.add(new Process("P1", 0, 4));
        processes.add(new Process("P2", 1, 3));
        processes.add(new Process("P3", 2, 5));
        int quantum = 2;

        roundRobin(processes, quantum);
    }

    public static void roundRobin(List<Process> processes, int quantum) {
        Queue<Process> queue = new LinkedList<>(processes);
        int currentTime = 0;
        List<Process> completedProcesses = new ArrayList<>();

        while (!queue.isEmpty()) {
            Process currentProcess = queue.poll();
            if (currentProcess.remainingTime > quantum) {
                currentTime += quantum;
                currentProcess.remainingTime -= quantum;
                queue.offer(currentProcess); // Re-add the process to the end of the queue
            } else {
                currentTime += currentProcess.remainingTime;
                currentProcess.completionTime = currentTime;
                currentProcess.remainingTime = 0;
                currentProcess.turnaroundTime = currentProcess.completionTime - currentProcess.arrivalTime;
                currentProcess.waitingTime = currentProcess.turnaroundTime - currentProcess.burstTime;
                completedProcesses.add(currentProcess);
            }

            // Check for any newly arrived processes
            for (Process process : processes) {
                if (process.arrivalTime <= currentTime && !queue.contains(process) && process.remainingTime > 0) {
                    queue.offer(process);
                }
            }
        }

        // Print the table
        System.out.println("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time");
        for (Process process : completedProcesses) {
            System.out.println(process.name + "\t\t" + process.arrivalTime + "\t\t\t" + process.burstTime + "\t\t\t" + 
                               process.completionTime + "\t\t\t" + process.turnaroundTime + "\t\t\t" + process.waitingTime);
        }
    }
}
